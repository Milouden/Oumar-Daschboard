# TO RUN: $streamlit run dashboard-streamlit.py

import streamlit as st
from PIL import Image
import requests
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import sys
import os
import shap
import time
from custtransformer import CustTransformer
from dashboard_functions import plot_boxplot_var_by_target
from dashboard_functions import plot_scatter_projection




# Configuration de la page streamlit
st.set_page_config(page_title='Tableau de bord de notation des clients demandeurs de pr√™ts :',
                       page_icon='random',
                       layout='centered',
                       initial_sidebar_state='auto')
#################################
#################################
#################################
# Affichage du titre
st.title('Tableau de bord de notation des demandeurs de pr√™ts :')
st.header("Oumar Gueye - Data Scientist - OC - project 7")
path = "logo2.png"
image = Image.open(path)
st.sidebar.image(image, width=300)
#st.text("Impl√©mentez un mod√®le de scoring")
st.subheader('Impl√©mentez un mod√®le de scoring')
#st.text("les informations relatives √† un client ou un groupe de clients :")
#id_input = st.text_input("Veuillez saisir l'identifiant d'un client:", )


@st.cache
def load_data (nrows):
    data = pd.read_parquet('app_test.parquet', nrows=nrows)
    data.drop(columns = {'Unnamed: 0'}  , inplace = True)
    data = data.replace([np.inf, -np.inf], np.nan)
    data.fillna(0, inplace=True)
    return data

data_load = st.text('Chargement des donn√©es...')
data = load_data() 
# 50
#st.write(data.head(5))



# Affichage du titre et des donn√©es relatives au client s√©lectionn√© ------------
st.sidebar.header('S√©lection du num√©ro du client')
id_client = st.sidebar.selectbox("Veuillez s√©lectionner l'identifiant d'un client:", data['SK_ID_CURR'])

#st.subheader('Les donn√©es relatives au client s√©lectionn√©')

data_client = data.loc[data['SK_ID_CURR'] == int(id_client)]
#data_client.columns = ['Informations clients']
st.write(data_client)


check_box2 = st.sidebar.checkbox(label = 'Description du projet')
if (check_box2):
    path1 = "logo.png"
    image1 = Image.open(path1)
    st.image(image1, width=300) 
    #st.title('Impl√©mentez un mod√®le de scoring')
    st.write('''
    **L'objectif du projet :**
    - Construire un mod√®le de scoring qui donnera une pr√©diction sur la probabilit√© de faillite d'un client de fa√ßon automatique. 
    - Construire un dashboard interactif √† destination des gestionnaires de la relation client permettant d'interpr√©ter les pr√©dictions faites par le mod√®le et d‚Äôam√©liorer la connaissance client des charg√©s de relation client.
    **Statut de remboursement du pr√™t**
    - **la valeur 0** : signifie que le pr√™t est rembours√©
    - **la valeur 1** : signifie que le pr√™t n'est pas rembours√©.
    ''')

    
    
def main() :

    @st.cache
    def load_data():
        #PATH = 'dataset/'
        #donn√©es test apr√®s feature engeniering
        df = pd.read_csv('app_test.csv')
        
        #donn√©es test avant feature engeniering
        data_test = pd.read_csv('app_test.csv')
        
        #donn√©es train avant feature engeniering
        data_train = pd.read_parquet('app_train.cvs')
        
        #donn√©es test avant feature engeniering
        #X_test = pd.read_csv(PATH+'X_test.parquet',encoding="ISO-8859-1", on_bad_lines='skip',lineterminator='\n')
        
        #donn√©es train avant feature engeniering
        #y_test = pd.read_csv(PATH+'y_test.csv')        
        
        #description des features
        description = pd.read_csv('HomeCredit_columns_description.csv', 
                                      usecols=['Row', 'Description'], \
                                  index_col=0, encoding='unicode_escape')

        return df, data_test, data_train,  description   # ,X_test 
         
        
        

check_box1 = st.sidebar.checkbox(label = 'Echantillonnage des donn√©es')
if (check_box1):
    
    st.subheader("Les dimensions de notre √©chantilon de donn√©es")
    st.write(data.shape)
    
    st.subheader("Les 5 premi√®res lignes de notre Dataframe")
    st.write(data.head(5))
    
    st.subheader('Les Statistiques de base de notre Dataframe')
    st.write(data.describe().T)
    
check_box4 = st.sidebar.checkbox(label = 'D√©cision de cr√©dit')
if (check_box4):

    #########################################################################################################
    #Titre principal

    html_temp = """
    <div style="background-color:pink; padding:10px; border-radius:5px">
    <h1 style="color: white; text-align:center"> </h1>
    </div>
    <p style="font-size: 20px; font-weight: bold; text-align:center"></p>
    """
            
    st.markdown(html_temp, unsafe_allow_html=True)
    with st.sidebar:
        ## st.header(" Pr√™t √† d√©penser")
        
        st.write("#### Veuillez choisir l'identificateur du Client...")
        #st.write("**ID Client est  :**", id_client)
        id_list = data["SK_ID_CURR"].tolist()
        # id_client = st.number_input("S√©lectionner l'identifiant du client" , step = 1 , value = 100001 )
        id_client = st.number_input(" " , step = 1 , value = 100001 )
        # id_client = st.selectbox(
        #    "S√©lectionner l'identifiant du client", id_list)

####    with st.expander("ü§î A quoi sert cette application ?"):
####        st.write("Ce dashboard interactif √† destination des gestionnaires de la relation client de l'entreprise **Pr√™t √† d√©penser** permet de comprendre et interpr√©ter les d√©cisions potentielles (pr√©dictions faites par un mod√®le d'apprentissage) d'ottroi ou non de cr√©dit aux clients") 
####        st.text('\n') 
####        st.write("**Objectif**:  r√©pondre au soucis de transparence vis-√†-vis des d√©cisions d‚Äôoctroi de cr√©dit qui va tout √† fait dans le sens des valeurs que l‚Äôentreprise veut incarner")
        ## st.image(LOGO_IMAGE)

def main() :
    @st.cache
    def load_model():
        '''loading the trained model'''
        return pickle.load(open('ModelClassifier.pkl', 'rb'))

    @st.cache
    def get_client_info(data, id_client):
        client_info = data[data['SK_ID_CURR']==int(id_client)]
        return client_info
    
###########################################################################################################################################
###########################################################################################################################################


    #Afficher l'ID Client s√©lectionn√©
    #st.write("**ID Client est  :**", id_client)
    id_list = data["SK_ID_CURR"].tolist()
    if (int(id_client) in id_list):
        st.markdown(" ‚úÖ **Ce client est dans notre base de donn√©e...**")

        client_info = get_client_info(data, id_client)
         #-------------------------------------------------------
        # Afficher les informations du client
        #-------------------------------------------------------

        personal_info_cols = {
            'CODE_GENDER': "GENRE",
            'DAYS_BIRTH': "AGE",
            'NAME_FAMILY_STATUS': "STATUT FAMILIAL",
            'CNT_CHILDREN': "NB ENFANTS",
            'FLAG_OWN_CAR': "POSSESSION VEHICULE",
            'FLAG_OWN_REALTY': "POSSESSION BIEN IMMOBILIER",
            'NAME_EDUCATION_TYPE': "NIVEAU EDUCATION",
            'OCCUPATION_TYPE': "EMPLOI",
            'DAYS_EMPLOYED': "NB ANNEES EMPLOI",
            'AMT_INCOME_TOTAL': "REVENUS",
            'AMT_CREDIT': "MONTANT CREDIT", 
            'NAME_CONTRACT_TYPE': "TYPE DE CONTRAT",
            'AMT_ANNUITY': "MONTANT ANNUITES",
            'NAME_INCOME_TYPE': "TYPE REVENUS",
            'EXT_SOURCE_1': "EXT_SOURCE_1",
            'EXT_SOURCE_2': "EXT_SOURCE_2",
            'EXT_SOURCE_3': "EXT_SOURCE_3",
            
            'AMT_GOODS_PRICE'         : "Prix des biens",
          ##  'NAME_TYPE_SUITE'         :  "Accompagnateur du client",
          ##  'NAME_EDUCATION_TYPE'     :   "Niveau de scolarit√© le plus √©lev√© du client",
            'NAME_HOUSING_TYPE'       :   "Situation de logement du client",
            'DAYS_REGISTRATION'       :   "Nbr jours avant la demande de modification de l'inscription",
            'OWN_CAR_AGE'             :   "Age de la voiture",
          ##  'FLAG_MOBIL'              :   "fourni un t√©l√©phone portable",
            'OCCUPATION_TYPE'         :   "Occupation",
            'CNT_FAM_MEMBERS'         :   "nombre de membre de la famille",
            'REGION_RATING_CLIENT'    :    "Notre √©valuation de la r√©gion",
        }
        
        default_list=\
        ["GENRE","AGE","STATUT FAMILIAL","NB ENFANTS","NB ANNEES EMPLOI","NIVEAU EDUCATION","Prix des biens",
      ##   "Accompagnateur du client","Niveau de scolarit√© le plus √©lev√© du client","Situation de logement du client",
       ##  "Nbr jours avant la demande de modification de l'inscription","Age de la voiture","fourni un t√©l√©phone portable",
         "Occupation","nombre de membre de la famille","Notre √©valuation de la r√©gion",
        ]
        numerical_features = ['DAYS_BIRTH', 'CNT_CHILDREN', 'DAYS_EMPLOYED', 'OWN_CAR_AGE', 'DAYS_REGISTRATION' , 'AMT_INCOME_TOTAL','AMT_CREDIT','AMT_ANNUITY','EXT_SOURCE_1','EXT_SOURCE_2','EXT_SOURCE_3','NAME_HOUSING_TYPE']

        rotate_label = ["NAME_FAMILY_STATUS", "NAME_EDUCATION_TYPE"]
        horizontal_layout = ["OCCUPATION_TYPE", "NAME_INCOME_TYPE"]
        
        
    else:    
        st.markdown("**‚ùå  Ce client n'existe pas dans notre base de donn√©e...**")
             


check_box3 = st.sidebar.checkbox(label = 'Visualisations des graphes')
if (check_box3):
    
    # LOGO_IMAGE = "logo.png"
    SHAP_GENERAL = "logo2.png"
    # shap_general = "feature_importance.png"

    with st.sidebar:
        ## st.header(" Pr√™t √† d√©penser")
        
        #st.write("## Identificateur du Client")
        #st.write("**ID Client est  :**", id_client)
        #id_list = data["SK_ID_CURR"].tolist()
        # id_client = st.number_input("S√©lectionner l'identifiant du client" , step = 1 , value = 100001 )
        #id_client = st.number_input(" " , step = 1 , value = 100001 )
        # id_client = st.selectbox(
        #    "S√©lectionner l'identifiant du client", id_list)
    
        st.write("### Choisir une op√©ration...")
        #st.write("**ID Client est  :**", id_client)
        # .sidebar.radio
        #    ------------------------------------------------------------------------
        #    ------------------------------------------------------------------------        
        show_client_details = st.checkbox("Description des features" , value = False)
        ##show_client_suplemntaryinfo = st.checkbox("les informations suppl√©mentaires")
        #show_credit_decision = st.checkbox("D√©cision de cr√©dit")
        #show_credit_model = st.checkbox("Mod√®le de d√©cision")
        #Evaluation_metric = st.checkbox("M√©triques d'√©valuation")
        show_metric_model = st.checkbox("Features importantes globale") 
        # show_client_comparison = st.checkbox("Comparer aux autres clients")
        shap_general = st.checkbox("Etude comparative Aux autres Clients")
        #visualisation_metric = st.checkbox("Visualisations")
        
    st.subheader("Diagramme √† bandes")
    st.bar_chart(data)
    
    
    #histogram
    st.subheader("histogramme des 4 meilleures variables")
    st.set_option('deprecation.showPyplotGlobalUse', False)
    df = pd.DataFrame(data[:20], columns = ["AMT_ANNUITY","AMT_CREDIT","AMT_INCOME_TOTAL","AMT_GOODS_PRICE"])
    df.hist()
    plt.show()
    st.pyplot()
    
    #Line Chart (Graphique en ligne)
    st.subheader("Line Chart (Graphique en ligne des 4 meilleures variables)")
    st.line_chart(df)
    
    #Diagramme en batons
    st.subheader("Diagramme en batons")
    st.bar_chart(data["AMT_CREDIT"])
    st.bar_chart(data["AMT_INCOME_TOTAL"])
    #st.bar_chart(data["AMT_INCOME_TOTAL"])
    
    #Graphique en aires
    st.subheader("Graphique en aires Cr√©dit/Revenu")
    chart_data = pd.DataFrame(data[:40], columns=["AMT_CREDIT","AMT_INCOME_TOTAL"])
    st.area_chart(chart_data)



if __name__ == '__main__':
    main()